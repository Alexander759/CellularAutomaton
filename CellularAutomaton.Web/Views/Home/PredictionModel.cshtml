@{
    ViewData["Title"] = "Модел за предсказване на пожари";
    int canvasWidth = 800;
    int canvasHeight = 400;
    string url = Context.Request.Host.ToUriComponent();
}
<style>
    .btnContainer {
        display: flex;
        flex-direction: row;
        gap: 2rem;
        align-items: center;
        justify-content: space-between;
    }
    .btnContainer button {
        flex-grow: 1;
        width: 15rem;
    }
    .btnContainer span {
        flex-grow: 1;
        width: 15rem;
    }
</style>
<div style="display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 2rem; padding-top: 3rem;">
    <h1 class="text-primary">Модел за предсказване на пожари</h1>
    <div>
        <canvas id="canvas" width=@canvasWidth height=@canvasHeight style="width:@canvasWidth; height:@canvasHeight; border: 1px solid black"></canvas>
    </div>
    <div style="display: flex; align-content: center; gap: 3rem;">
        <button class="btn btn-secondary" id="btnPrev">Previous</button>
        <button class="btn btn-danger" id="btnStartStop">Strat/Stop</button>
        <button class="btn btn-secondary" id="btnRestart">Restart</button>
        <button class="btn btn-secondary" id="btnNext">Next</button>
    </div>
    <div style="display: grid; flex-direction: column; gap: 1rem; justify-content: space-around;">
        <div class="btnContainer">
			<span class="text-primary">Тревна растителност:</span>
            <button id="0" type="button" class="btn btn-primary" onclick="changeColor(0)">Трева с ниска гъстота</button>
            <button id="1" type="button" class="btn btn-primary" onclick="changeColor(1)">Трева със средна гъстота</button>
            <button id="2" type="button" class="btn btn-primary" onclick="changeColor(2)">Трева с висока гъстота</button>
		</div>
        <div class="btnContainer">
            <span class="text-primary">Храстовидна растителност:</span>
            <button id="3" type="button" class="btn btn-primary" onclick="changeColor(3)">Храсти с ниска гъстота</button>
            <button id="4" type="button" class="btn btn-primary" onclick="changeColor(4)">Храсти със средна гъстота</button>
            <button id="5" type="button" class="btn btn-primary" onclick="changeColor(5)">Храсти с висока гъстота</button>
        </div>
        <div class="btnContainer">
            <span class="text-primary">Дървесна растителност:</span>
            <button id="6" type="button" class="btn btn-primary" onclick="changeColor(6)">Дървета с ниска гъстота</button>
            <button id="7" type="button" class="btn btn-primary" onclick="changeColor(7)">Дървета със средна гъстота</button>
            <button id="8" type="button" class="btn btn-primary" onclick="changeColor(8)">Дървета с висока гъстота</button>
        </div>
        <div class="btnContainer">
            <span class="text-primary">Други елементи:</span>
            <button id="9" type="button" class="btn btn-primary" onclick="changeColor(9)">Вода</button>
            <button id="10" type="button" class="btn btn-primary" onclick="changeColor(10)">Скали</button>
            <button id="11" type="button" class="btn btn-primary" onclick="changeColor(11)">Пожар</button>
        </div>
        <div style="display: flex; flex-direction: row; gap: 1rem; justify-content: center; align-items: center;">
            <span class="text-info" id="rangeLabel1">Размер на четката: 50</span>
            <input id="slider1" type="range" class="form-range" min="10" max="100" step="10" value="50" style="width: 30rem;">
        </div>
        <div style="display: flex; flex-direction: row; gap: 1rem; justify-content: center; align-items: center;">
            <sapn class="text-info">Посока на вятъра</sapn>
            <svg fill="#000000" width="50px" height="50px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 330 330" xml:space="preserve">
                <path id="arrow" style="transform-origin: 50% 50%" d="M15,180h263.787l-49.394,49.394c-5.858,5.857-5.858,15.355,0,21.213C232.322,253.535,236.161,255,240,255  s7.678-1.465,10.606-4.394l75-75c5.858-5.857,5.858-15.355,0-21.213l-75-75c-5.857-5.857-15.355-5.857-21.213,0  c-5.858,5.857-5.858,15.355,0,21.213L278.787,150H15c-8.284,0-15,6.716-15,15S6.716,180,15,180z" />
            </svg>
            <input id="slider2" type="range" class="form-range" min="0" max="6.28" step="0.01" value="0" style="width: 30rem;">
        </div>
    </div>
    
    
</div>

<script>
    let brushSize = 50;
    let windDirection = 0.0;
    let canvas = document.getElementById("canvas");
    let ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = false;

    const colorCodes = [
      { tileType: "lowGrass",   color: "#fdff99" },
      { tileType: "midGrass",   color: "#fbff4a" },
      { tileType: "highGrass",  color: "#747527" },
      { tileType: "lowBush",    color: "#d1a3ff" },
      { tileType: "midBush",    color: "#9d3bff" },
      { tileType: "highBush",   color: "#4c2275" },
      { tileType: "lowTree",    color: "#90c96f" },
      { tileType: "midTree",    color: "#568c37" },
      { tileType: "highTree",   color: "#3f6927" },
      { tileType: "water",      color: "#0091ff" },
      { tileType: "rock",       color: "#4d4d4d" },
      { tileType: "fire",       color: "#ff0000" },
      { tileType: "burnt",      color: "#1a120d" }
    ];

    ctx.fillStyle = colorCodes[7].color;
    document.getElementById(7).classList.add("btn-success");
    ctx.fillRect(0,0,@canvasWidth, @canvasHeight);

    canvas.addEventListener("click", function (e) {
        ctx.fillRect(e.offsetX - brushSize/2, e.offsetY - brushSize/2, brushSize, brushSize);
    })

    let isDrawing = false;

    canvas.addEventListener("mousedown", function () {
        isDrawing = true;
    })
    
    canvas.addEventListener("mousemove", function(e) {
        if(isDrawing){
            ctx.fillRect(e.offsetX - brushSize/2, e.offsetY - brushSize/2, brushSize, brushSize);
        }
    })

    canvas.addEventListener("mouseup", function(e) {
        isDrawing = false;
    })

    canvas.addEventListener("mouseleave", function(e) {
        isDrawing = false;
    })

    let lastColor = 7;
    function changeColor(index){
        ctx.fillStyle = colorCodes[index].color;
        document.getElementById(index).classList.add("btn-success");
        document.getElementById(lastColor).classList.remove("btn-success");
        lastColor = index;
    }


    document.getElementById("slider1").oninput = function (e) {
        brushSize = e.target.value;
        document.getElementById("rangeLabel1").textContent = "Размер на четката: " + brushSize;
    };

    document.getElementById("slider2").oninput = function (e) {
        windDirection = e.target.value;
        document.getElementById("arrow").style = "transform-origin: 50% 50%; transform: rotate(" + windDirection*(-57.29) + "deg)";
        console.log(windDirection);
    };

</script>

<script>
    document.getElementById("btnStartStop").addEventListener("click", async () => {
        const canvas = document.getElementById("canvas");
        if (!canvas) {
            console.error("Canvas element not found!");
            return;
        }
        const ctx = canvas.getContext('2d');
        // Convert canvas to base64 string
        const imageData = canvas.toDataURL("image/png");

        function loadBase64Image(base64String) {
            const img = new Image();
            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
            };
            img.src = "data:image/png;base64," + base64String;
        }

        try {
            const response = await fetch("https://@url/api/StatesOfSimulation/sendState", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ Image: imageData, WindDirection: 1, Width: 400, Height: 200, TileSize: 2 })
            });

            if (!response.ok) {
                throw new Error("Failed to upload image");
            }

            const result = await response.json();

                
            for (let i = 0; i < result.images.length; i++){
                loadBase64Image(result.images[i]);
                await new Promise(resolve => setTimeout(resolve, 500));
            }
        } catch (error) {
            console.error("Error uploading image:", error);
        }
    });

</script>