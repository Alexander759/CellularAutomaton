@{
	ViewData["Title"] = "Модел за предсказване на пожари";
	string url = Context.Request.Host.ToUriComponent();
}
<style>
	.btnContainer {
		display: flex;
		flex-direction: row;
		gap: 2rem;
		align-items: center;
		justify-content: space-between;
	}

	.btnContainer button {
		flex-grow: 1;
		width: 15rem;
	}

	.btnContainer span {
		flex-grow: 1;
		width: 15rem;
	}

	#controlContainer button {
		width: 7rem;
	}
</style>
<div style="display: flex; flex-direction: column; justify-content: center; align-items: center; gap: 2rem; padding-top: 3rem;">
	<h1 class="text-primary">Модел за предсказване на пожари</h1>
	<div>
		<canvas id="canvas" width="800" height="400" style="border: 1px solid black"></canvas>
	</div>
	<div id="controlContainer" style="display: flex; align-content: center; gap: 3rem;">
		<button class="btn btn-secondary" id="btnPrev">Предишен</button>
		<button class="btn btn-danger" id="btnStartStop" onclick="startStopSimulation()">Старт</button>
		<button class="btn btn-secondary" id="btnRestart">Рестарт</button>
		<button class="btn btn-secondary" id="btnNext">Следващ</button>
		<button class="btn btn-secondary" id="btnUpload">Качи</button>
		<input type="file" id="btnUploadInput" accept="image/png" hidden />
	</div>
	<div style="display: grid; flex-direction: column; gap: 1rem; justify-content: space-around;">
		<div class="btnContainer">
			<span class="text-primary">Тревна растителност:</span>
			<button id="0" type="button" class="btn btn-primary" onclick="changeColor(0)">Трева с ниска гъстота</button>
			<button id="1" type="button" class="btn btn-primary" onclick="changeColor(1)">Трева със средна гъстота</button>
			<button id="2" type="button" class="btn btn-primary" onclick="changeColor(2)">Трева с висока гъстота</button>
		</div>
		<div class="btnContainer">
			<span class="text-primary">Храстовидна растителност:</span>
			<button id="3" type="button" class="btn btn-primary" onclick="changeColor(3)">Храсти с ниска гъстота</button>
			<button id="4" type="button" class="btn btn-primary" onclick="changeColor(4)">Храсти със средна гъстота</button>
			<button id="5" type="button" class="btn btn-primary" onclick="changeColor(5)">Храсти с висока гъстота</button>
		</div>
		<div class="btnContainer">
			<span class="text-primary">Дървесна растителност:</span>
			<button id="6" type="button" class="btn btn-primary" onclick="changeColor(6)">Дървета с ниска гъстота</button>
			<button id="7" type="button" class="btn btn-primary" onclick="changeColor(7)">Дървета със средна гъстота</button>
			<button id="8" type="button" class="btn btn-primary" onclick="changeColor(8)">Дървета с висока гъстота</button>
		</div>
		<div class="btnContainer">
			<span class="text-primary">Други елементи:</span>
			<button id="9" type="button" class="btn btn-primary" onclick="changeColor(9)">Вода</button>
			<button id="10" type="button" class="btn btn-primary" onclick="changeColor(10)">Скали</button>
			<button id="11" type="button" class="btn btn-primary" onclick="changeColor(11)">Пожар</button>
		</div>
		<div style="display: flex; flex-direction: row; gap: 1rem; justify-content: center; align-items: center;">
			<span class="text-info" id="rangeLabel1">Размер на четката: 50</span>
			<input id="slider1" type="range" class="form-range" min="10" max="100" step="10" value="50" style="width: 30rem;">
		</div>
		<div style="display: flex; flex-direction: row; gap: 1rem; justify-content: center; align-items: center;">
			<span class="text-info">Посока на вятъра</span>
			<svg fill="#000000" width="50px" height="50px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 330 330" xml:space="preserve">
			<path id="arrow" style="transform-origin: 50% 50%" d="M15,180h263.787l-49.394,49.394c-5.858,5.857-5.858,15.355,0,21.213C232.322,253.535,236.161,255,240,255  s7.678-1.465,10.606-4.394l75-75c5.858-5.857,5.858-15.355,0-21.213l-75-75c-5.857-5.857-15.355-5.857-21.213,0  c-5.858,5.857-5.858,15.355,0,21.213L278.787,150H15c-8.284,0-15,6.716-15,15S6.716,180,15,180z" />
			</svg>
			<input id="slider2" type="range" class="form-range" min="0" max="6.28" step="0.01" value="0" style="width: 30rem;">
		</div>
		<form action="/post" method="post" style="display: flex; flex-direction: row; justify-content: space-around;" onsubmit="changeCanvasDimentions(event)">
			<label class="text-secondary">Въведете ширина: </label>
			<input class="form-control" name="canWidth" style="width: 8rem;" type="text" value="800" id="canWidth" />
			<label class="text-secondary">Въведете височина: </label>
			<input class="form-control" name="canHeight" style="width: 8rem;" type="text" value="400" id="canHeight" />
			<button class="btn btn-success">Запази</button>
		</form>
	</div>


</div>

<script>
	const DEFAULT_COLOR = 7;
	let lastColor = DEFAULT_COLOR;

	function resetCanvas(){
		document.getElementById(lastColor).classList.remove("btn-success");
		ctx.fillStyle = colorCodes[DEFAULT_COLOR].color;
		document.getElementById(DEFAULT_COLOR).classList.add("btn-success");
		ctx.fillRect(0, 0, canvasWidth, canvasHeight);
		lastColor = DEFAULT_COLOR;
	}
</script>

<script>
	let canvasWidth = 800;
	let canvasHeight = 400;
	let brushSize = 50;
	let windDirection = 0.0;
	var canvas = document.getElementById("canvas");
	var ctx = canvas.getContext("2d");
	ctx.imageSmoothingEnabled = false;

	const colorCodes = [
	  { tileType: "lowGrass",   color: "#fdff99" },
	  { tileType: "midGrass",   color: "#fbff4a" },
	  { tileType: "highGrass",  color: "#747527" },
	  { tileType: "lowBush",    color: "#d1a3ff" },
	  { tileType: "midBush",    color: "#9d3bff" },
	  { tileType: "highBush",   color: "#4c2275" },
	  { tileType: "lowTree",    color: "#90c96f" },
	  { tileType: "midTree",    color: "#568c37" },
	  { tileType: "highTree",   color: "#3f6927" },
	  { tileType: "water",      color: "#0091ff" },
	  { tileType: "rock",       color: "#4d4d4d" },
	  { tileType: "fire",       color: "#ff0000" },
	  { tileType: "burnt",      color: "#1a120d" }
	];

	let isDrawing = false;
	resetCanvas();
	canvas.addEventListener("click", function (e) {
		ctx.fillRect(e.offsetX - brushSize/2, e.offsetY - brushSize/2, brushSize, brushSize);
	})

	canvas.addEventListener("mousedown", function () {
		isDrawing = true;
	});

	canvas.addEventListener("mousemove", function(e) {
		if(isDrawing){
			ctx.fillRect(e.offsetX - brushSize/2, e.offsetY - brushSize/2, brushSize, brushSize);
		}
	});

	canvas.addEventListener("mouseup", function(e) {
		isDrawing = false;
	});

	canvas.addEventListener("mouseleave", function(e) {
		isDrawing = false;
	});

	function changeColor(index){
		if(index == lastColor) return;
		ctx.fillStyle = colorCodes[index].color;
		document.getElementById(index).classList.add("btn-success");
		document.getElementById(lastColor).classList.remove("btn-success");
		lastColor = index;
	}

	function changeCanvasDimentions(event){
		event.preventDefault();
		canvasWidth = event.target.canWidth.value;
		canvasHeight = event.target.canHeight.value;

		ctx.canvas.width = canvasWidth;
		ctx.canvas.height = canvasHeight;

		resetCanvas();
	}


	document.getElementById("slider1").oninput = function (e) {
		brushSize = e.target.value;
		document.getElementById("rangeLabel1").textContent = "Размер на четката: " + brushSize;
	};

	document.getElementById("slider2").oninput = function (e) {
		windDirection = e.target.value;
		document.getElementById("arrow").style = "transform-origin: 50% 50%; transform: rotate(" + windDirection*(-57.29) + "deg)";
	};
</script>

<script>
	function loadBase64Image(base64String) {
		const img = new Image();
		img.onload = function () {
			canvas.width = img.width;
			canvas.height = img.height;
			ctx.drawImage(img, 0, 0);
		};
		img.src = "data:image/png;base64," + base64String;
	}

	const frames = [];
	let currentFrameIndex = 0;
	let isFetching = false;
	let animationId = null;
	
	
	function StopAnimation() {
		if (animationId) {
			clearTimeout(animationId);
			animationId = null;
		}
		frames.splice(currentFrameIndex);
	}

	async function StartAnimation() {
		const imageData = canvas.toDataURL("image/png");
		frames.push(imageData);

		if(currentFrameIndex!==0){
			currentFrameIndex++;
		}

		
    async function fetchNextFrames() {
        if (isFetching) return;
        isFetching = true;

        try {
            const response = await fetch("https://@url/api/StatesOfSimulation/sendState", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    Image: frames[frames.length - 1],
                    WindDirection: windDirection,
                    Width: canvasWidth,
                    Height: canvasHeight,
                    TileSize: 1
                })
            });

            if (!response.ok) throw new Error("Failed to upload image");

            const result = await response.json();
            if (result.images && result.images.length > 0) {
                frames.push(...result.images);
            } else {
                console.warn("No new frames received.");
            }
        } catch (error) {
            console.error("Error uploading image:", error);
        } finally {
            isFetching = false;
        }
    }

    function ShowNextSimulationFrame() {
        if (currentFrameIndex < frames.length - 1) {
            currentFrameIndex++;
            loadBase64Image(frames[currentFrameIndex]);
        }

        if (frames.length - currentFrameIndex < 20 && !isFetching) {
            fetchNextFrames();
        }

        animationId = setTimeout(ShowNextSimulationFrame, 500);
    }

    ShowNextSimulationFrame();
}
	
</script>


<script>
	let isRunning = false;

	function startStopSimulation() {
		if(isRunning){
			isRunning = false;

			StopAnimation();
			enableButtons();
			enableInputs();
			document.getElementById("btnStartStop").textContent = "Старт";
			ctx.fillStyle = colorCodes[lastColor].color;
			return;
		};
		isRunning = true;

		disableButtons();
		disableInputs();
		document.getElementById("btnStartStop").textContent = "Стоп";
		StartAnimation();
	}

	function disableButtons(){
			document.querySelectorAll("button").forEach(button => {
			if(button.parentElement.id != "controlContainer") button.disabled = true;
		});
	}
	function disableInputs(){
			document.querySelectorAll("input").forEach(input => {
			input.disabled = true;
		});
	}

	function enableButtons(){
			document.querySelectorAll("button").forEach(button => {
			button.disabled = false;
		});
	}
	function enableInputs(){
			document.querySelectorAll("input").forEach(input => {
			input.disabled = false;;
		});
	}
</script>

<script>
	document.getElementById("btnUpload").addEventListener("click", () => {
		document.getElementById("btnUploadInput").click();
	})


	document.getElementById("btnUploadInput").addEventListener("change", () => {
		const file = event.target.files[0];

		if (file) {
			const reader = new FileReader();
			reader.readAsDataURL(file);
			reader.onload = () => {
				loadBase64Image(reader.result.split(",")[1]);
			};

			setTimeout(() => {
				canvasWidth = canvas.width;
				canvasHeight = canvas.height;
				document.getElementById("canWidth").value = canvasWidth;
				document.getElementById("canHeight").value = canvasHeight;
			}, 500);
		}
	})
</script>